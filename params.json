{"name":"Malwarez","tagline":"Malware visualization on earth map","body":"MalwareZ\r\n========\r\n[![Build Status](https://travis-ci.org/YakindanEgitim/malwarez.svg?branch=devel)](https://travis-ci.org/YakindanEgitim/malwarez)\r\n[![Code Health](https://landscape.io/github/YakindanEgitim/malwarez/master/landscape.svg)](https://landscape.io/github/YakindanEgitim/malwarez/master)\r\n\r\nMalwareZ is a project for visualizing malware activity on earth map.\r\nCurrent ersion is v0.2a.\r\n\r\n## Aim\r\n\r\nThe aim was to provide real time visualization of malware activities with historical data.\r\n\r\nHere is a sample demo: [http://malwarez.comu.edu.tr:8001](http://malwarez.comu.edu.tr:8001)\r\n\r\n## Current Status\r\n\r\nAt the demo site v0.2a has two visualizations. One of them is the 2D map that displays number of malwares detected depending on the geographic location. The data is gathered from distributed honeypots using [Hpfeeds](https://github.com/rep/hpfeeds). \r\nClicking on the countries will cause 3D map display. You will see the per country basis malware hits by observing the bar heights.\r\n\r\nSecond visualization is the heatmap display. Either looking at the diversities or the malware counts, the heatmap is regenerated. \r\n\r\nBoth the 2D map and heatmap is working in live mode, that is you will see either yellow or green dots that means a new malware hit detected at this point. \r\nDepending on the channel frequency used with hpfeeds, the more dots may be seen.\r\n\r\nSome statistical knowledge als can be gathered by clicking at the left side arrow. The sliding panel will display top ports and IP numbers.\r\n\r\n## How to install\r\n* Before installation please make sure that your system has necessary packages installed.\r\n* For Ubuntu run the below command at the terminal window:\r\n\r\n\t`$ sudo apt-get install build-essential python-dev libevent-dev libmysqlclient-dev python-virtualenv`\r\n\r\n* Then you will need virtual environment to install the required packaes at a single directory.\r\n\r\n\t`$ virtualenv env-demo --no-site-packages (tested with version 1.9.1)`\r\n\t\r\n\t`$ cd env-demo`\r\n\t\r\n\t`$ source bin/activate`\r\n\t\r\n* Clone the cource code\r\n\r\n\t`$ git clone https://github.com/YakindanEgitim/malwarez.git`\r\n\t\r\n\t`$ cd malwarez`\r\n\t\r\n\t`$ git checkout devel`\r\n\r\n* Install Python dependencies\t\r\n\r\n\t`$ pip install -r pip_requirements.txt`\r\n\r\n* You need to create a database and create a user for it. Open prepareDB.sh and set root username (password will be prompted during execution) also set the variables to create new db and user, such as hostname, database, username and password\r\n\r\n\t`$ ./prepareDB.sh`\r\n\r\n* update settings.py with info from prepareDB.sh\r\n\r\n* Let the Django DB API create required tables by running the below command\r\n\r\n\t`$ ./manage.py syncdb`\r\n\r\n* Run the server and feeder for live data. You need [Hpfriends](http://hpfriends.honeycloud.net) user ident and key with a shared channel. \r\nUpdate ./scripts/hpfeeds/hpfeeds.json with your information before running the below command.\r\n\r\n\t`$ ./run.py &`\r\n\t\r\n\t`$ ./scripts/hpfeeds/feedReader.py &`\r\n\r\n## How to run\r\n\r\nBy default it is running on port 10080.\r\njust open localhost on your browser and that's it.\r\n\r\n## FAQ\r\n\r\nHow to change port number of server?\r\n* 2 files should be changed. Both of the following variable values should be same otherwise new events does not shows up.\r\n* run.py: change the value of PORT variable\r\n* scripts/hpfeeds/feedReader.py: change the value of socketIOPort\r\n\r\nI added a script but can not find modules although they are installed in virtualenv.\r\n* check the python interpreter line. do not use #!/usr/bin/python which is system's interpreter not the virtual-env's. Use #!/usr/bin/env python\r\n\r\n## Tools\r\nThis project uses following libraries/projects. Thanks for their great work...\r\n\r\nShowing Fancy SVG maps\r\n* Kartograph.js: (http://kartograph.org/docs/kartograph.js/)\r\n* RaphaÃ«l: (http://raphaeljs.com/\")\r\n* Chroma: (https://github.com/gka/chroma.js)\r\n\r\nRealtime Data Support\r\n* Socket.io: (http://socket.io/)\r\n\r\nFor web front-end:\r\n* Django: (https://www.djangoproject.com/)\r\n\r\nDB backend\r\n* MySQL-Python: (https://github.com/farcepest/MySQLdb1)\r\n\r\nSocket.io Django Integration\r\n* Gevent: (http://www.gevent.org/)\r\n* Gevent-Socketio: (https://github.com/abourget/gevent-socketio)\r\n* Gevent-Websocket: (https://github.com/abourget/gevent-websocket)\r\n\r\nRestful API\r\n* Django-Tastypie: (http://tastypieapi.org/)\r\n\r\nCollecting hpfeeds data and sending realtime data to server over socket.io\r\n* Hpfeeds: (https://github.com/rep/hpfeeds)\r\n* SocketIO-Client: (https://pypi.python.org/pypi/socketIO-client)\r\n\r\nGenerating both 2D and 3D SVG maps\r\n* Kartograph.py: (http://kartograph.org/docs/kartograph.py/)\r\n\r\nGeo-Location Services\r\n* This product includes GeoLite data created by MaxMind, available from (http://www.maxmind.com)\r\n* Pygeoip: (http://code.google.com/p/pygeoip/)\r\n\r\nGeneral Purpose :)\r\n* JQuery: (http://jquery.com/)\r\n* Script: (https://github.com/ded/script.js)\r\n\r\nNice Layout :)\r\n* Twitter Bootstrap: (http://twitter.github.io/bootstrap/) [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0\")\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/YakindanEgitim/malwarez/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")","google":"UA-41233717-1","note":"Don't delete this file! It's used internally to help with page regeneration."}