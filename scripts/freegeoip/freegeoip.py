#!/usr/bin/python
# coding=utf-8

# ipdb.sqlite generated by freegeoip project's updatedb command. https://github.com/fiorix/freegeoip
import sqlite3 as lite
import random
import pygeoip
import os
sPath = os.path.dirname(os.path.realpath(__file__))+'/'
gi = pygeoip.GeoIP(sPath + '../geolite/GeoLiteCity.dat', pygeoip.MEMORY_CACHE)


def __get_ip_range_list(sql_query, params):
    sql_file = 'ipdb.sqlite'
    con = lite.connect(sql_file)

    ip_start = 0
    ip_end = 1

    range_list = []
    with con:
        cur = con.cursor()
        cur.execute(sql_query, params)
        rows = cur.fetchall()
        for row in rows:
            sip = row[ip_start]
            eip = row[ip_end]
            range_list.append((sip, eip))

    return range_list


def get_ip_range_list_by_city(city_name):
    sql_query = 'SELECT ip_start, ip_end FROM city_blocks, city_location WHERE city_name LIKE ? AND ' \
                'city_blocks.loc_id=city_location.loc_id'
    params = (city_name, )
    return __get_ip_range_list(sql_query, params)


def get_ip_range_list_by_country(country_name):
    sql_query = 'SELECT ip_start, ip_end FROM country_blocks WHERE country_name LIKE ?'
    params = (country_name, )
    return __get_ip_range_list(sql_query, params)


def __select_random_ip(ip_range, count):
    random_ip = []
    for x in xrange(0, count):
        i = random.randint(0, len(ip_range))
        start_ip = int(ip_range[i][0])
        end_ip = int(ip_range[i][1])

        rand_ip = random.randint(start_ip, end_ip)
        random_ip.append(rand_ip)
        print x, ' - ', rand_ip

    return random_ip


def get_random_ip_by_city(city_name, count=0):
    ip_range = get_ip_range_list_by_city(city_name)
    return __select_random_ip(ip_range, count)


def get_random_ip_by_country(country_name, count=0):
    ip_range = get_ip_range_list_by_country(country_name)
    return __select_random_ip(ip_range, count)


def convert_to_ip_num(ip_str):
    octets = ip_str.split('.')
    ip_num = ((int(octets[0]) << 24)
              + (int(octets[1]) << 16)
              + (int(octets[2]) << 8)
              + (int(octets[3]))
              )

    return ip_num


def convert_to_ip_str(ip_num):
    o1 = str((ip_num >> 24) & 0xFF)
    o2 = str((ip_num >> 16) & 0xFF)
    o3 = str((ip_num >> 8) & 0xFF)
    o4 = str(ip_num & 0xFF)

    address = o1 + '.' + o2 + '.' + o3 + '.' + o4
    return address


def get_city_info_by_ip(ip_addr):
    return gi.record_by_addr(ip_addr)

if __name__ == '__main__':
    ips = get_random_ip_by_city('New York', 10)
    for rip in ips:
        ripStr = convert_to_ip_str(rip)
        print ripStr, ' -- ', get_city_info_by_ip(ripStr)

    ips = get_random_ip_by_country('Germany', 10)
    for rip in ips:
        ripStr = convert_to_ip_str(rip)
        print ripStr, ' -- ', get_city_info_by_ip(ripStr)
