#!/usr/bin/python
# -- coding: utf-8 --
import json
import sys
import time
import os
from subprocess import PIPE, STDOUT, Popen, call
from Queue import Queue
from threading import Thread

sPath=os.path.dirname(os.path.realpath(__file__))+'/'
sys.path.append(sPath+'../../../lib/python2.7/site-packages/')
sys.path.append(sPath+'../freegeoip/')
sys.path.append(sPath+'../../')

from socketIO_client import SocketIO
import freegeoip

# Set the DJANGO_SETTINGS_MODULE environment variable.
os.environ['DJANGO_SETTINGS_MODULE'] = "malwarez.settings"
from web.models import Feed


databaseQueue = Queue(250)
socketQueue = Queue(250)

def socketThread():
    global socketQueue

    def _sendNewFeed(chatSocket, newFeed):
        info = freegeoip.getCityInfoByIp(newFeed.saddr)
        if info:
            #print 'info:', info
            newFeed.longitude = info['longitude']
            newFeed.latitude = info['latitude']
            newFeed.country = info['country_code3']

            city = info['city']
            if city:
                try:
                    city = city.decode('utf-8', 'ignore')
                except:
                    city = ''

                newFeed.city = city

            coordinate = "{ \"country\":\"%s\", \"city\":\"%s\", \"x\": \"%f\", \"y\": \"%f\"}" % (newFeed.country, newFeed.city, info['longitude'], info['latitude'])
            chatSocket.emit('update', coordinate)


    socketIO = SocketIO('127.0.0.1', 8000)
    chatSocket = socketIO.connect('/new-event')
    while True:
        newFeed = socketQueue.get()
        _sendNewFeed(chatSocket, newFeed)
        socketQueue.task_done()

def databaseThread():
    global databaseQueue
    while True:
        newFeed = databaseQueue.get()
        newFeed.save()
        databaseQueue.task_done()

def hpfeedsThread():
    global databaseQueue, socketQueue

    HPFRIENDS='hpfeeds-client'
    DUMMY_HPFRIENDS=sPath + 'dummyGenerator.py'

    #selected_feedSource = DUMMY_HPFRIENDS
    selected_feedSource = HPFRIENDS

    accountFile = open(sPath+'hpfriends.json', 'r')
    account = json.load(accountFile)

    cmd = [selected_feedSource,
           '-i', str(account['user']),
           '-s', str(account['pass']),
           '--host', str(account['host']),
           '-p', str(account['port']),
           '-c', str(account['capture']),
           str(account['action'])]

    cmd = " ".join(cmd)
    pHpf=Popen(cmd, stdout=PIPE, shell=True)
    feedStdout = pHpf.stdout
    while True:
        newFeed = feedStdout.readline()
        if newFeed:
            # TODO: Find a better way to parse
            try:
                index = newFeed.index(':')
                newFeed = newFeed[(index+1):]
            except ValueError:
                continue

            data = json.loads(newFeed)
            newFeed = Feed(url=data['url'], daddr=data['daddr'],
                            saddr=data['saddr'], sport=data['sport'],
                            dport=data['dport'], sha512=data['sha512'],
                            md5=data['md5'], longitude=-1,
                            latitude=-1, city=u'', country=u'')

            databaseQueue.put(newFeed)
            socketQueue.put(newFeed)

def startThreads():
    joinable=[]
    global databaseQueue, socketQueue

    t = Thread(target=hpfeedsThread)
    t.daemon = True
    joinable.append(t)
    t.start()

    t = Thread(target=databaseThread)
    t.daemon = True
    joinable.append(t)
    t.start()

    t = Thread(target=socketThread)
    t.daemon = True
    joinable.append(t)
    t.start()

    for t in joinable:
        t.join()
        
if __name__ == '__main__' :
    startThreads()
