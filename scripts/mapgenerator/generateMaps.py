#!/usr/bin/env python
from xml.dom import minidom
from subprocess import call
import os
import sys


def createJSON(countryCode, boxInfo):
    f = open('input/country-template.json', 'r')
    jsonData = f.read()

    newJSON = jsonData.replace('$$countryCode$$', countryCode)\
        .replace('$$w$$', boxInfo['w'])\
        .replace('$$id$$', countryCode.lower())\
        .replace('$$e$$', boxInfo['e'])\
        .replace('$$n$$', boxInfo['n'])\
        .replace('$$s$$', boxInfo['s'])\
        .replace('$$lon0$$', boxInfo['lon0'])\
        .replace('$$lat0$$', boxInfo['lat0'])

    jsonFile = 'map-'+countryCode.lower()+'.json'

    print "generating %s" % jsonFile
    out = open('json/'+jsonFile, 'w')
    out.write(newJSON)
    out.flush()
    out.close()

    f.close()


def getCountryBoxes():
    def getData(node, tag):
        xmlDomObj = node.getElementsByTagName(tag)[0]
        return xmlDomObj.firstChild.data

    countryInfoXML = 'input/countryInfo.xml'
    xmldoc = minidom.parse(countryInfoXML)
    countries = xmldoc.getElementsByTagName('country')

    r = {}
    for c in countries:
        countryCode = getData(c, 'isoAlpha3')
        w = float(getData(c, 'west'))
        e = float(getData(c, 'east'))
        s = float(getData(c, 'south'))
        n = float(getData(c, 'north'))

        if e < w:
            e += 360

        constant = 0
        distance = abs(n - s)
        if distance >= 20:
            constant = 15
        elif 10 < distance < 20:
            constant = 20
        else:
            constant = 30

        lon0 = str((w+e)/2)
        lat0 = str(s - constant)

        w = str(w)
        e = str(e)
        s = str(s)
        n = str(n)
        r[countryCode] = {"w": w, "e": e, "n": n, "s": s, "lon0": lon0, "lat0": lat0}
    return r


def getCountryCodes():
    selectedFeature = 'data-adm0-a3'

    svgFile = 'input/world-detailed2.svg'
    xmldoc = minidom.parse(svgFile)
    paths = xmldoc.getElementsByTagName('path')
    p = paths[0]

    v = []

    for p in paths:
        attr = p.attributes
        for k in attr.keys():
            if k == selectedFeature:
                val = attr.get(k).value
                v.append(val)

    return v


def checkFolders():
    # TODO: check shp files, if not exists download...
    dirs = ['json', 'output', 'shp']
    # Check folders
    for d in dirs:
        if not os.path.exists(d):
            os.makedirs(d)


def createSVG(jsonFolder, outputFolder):
    for jsonFile in os.listdir(jsonFolder):
        outputFile = "%s.svg" % jsonFile.split('.')[0]
        print "generating %s" % outputFile
        call(['kartograph', jsonFolder + '/' + jsonFile, '-o', outputFolder + '/' + outputFile])


if __name__ == '__main__':
    # Check the shp file
    checkFolders()

    # Get the country codes.
    countries = getCountryCodes()
    countryBoxes = getCountryBoxes()

    failed = []
    for code in countries:
        code = code.upper()
        try:
            bbox = countryBoxes[code]
            print code, ' : ', bbox
            createJSON(code, bbox)
        except KeyError:
            print 'There is no such key for bbox:', code
            failed.append(code)

    createSVG('json', 'output')

    print 'failed countries: ', failed
