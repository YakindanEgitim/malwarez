#!/usr/bin/env python
from xml.dom import minidom
from subprocess import call
import os


def create_json(country_code, box_info):
    f = open('input/country-template.json', 'r')
    json_data = f.read()

    new_json = json_data.replace('$$countryCode$$', country_code)\
        .replace('$$w$$', box_info['w'])\
        .replace('$$id$$', country_code.lower())\
        .replace('$$e$$', box_info['e'])\
        .replace('$$n$$', box_info['n'])\
        .replace('$$s$$', box_info['s'])\
        .replace('$$lon0$$', box_info['lon0'])\
        .replace('$$lat0$$', box_info['lat0'])

    json_file = 'map-'+country_code.lower()+'.json'

    print "generating %s" % json_file
    out = open('json/'+json_file, 'w')
    out.write(new_json)
    out.flush()
    out.close()

    f.close()


def get_country_boxes():
    def get_data(node, tag):
        xml_dom_obj = node.getElementsByTagName(tag)[0]
        return xml_dom_obj.firstChild.data

    country_info_xml = 'input/countryInfo.xml'
    xml_doc = minidom.parse(country_info_xml)
    _countries = xml_doc.getElementsByTagName('country')

    r = {}
    for c in _countries:
        country_code = get_data(c, 'isoAlpha3')
        w = float(get_data(c, 'west'))
        e = float(get_data(c, 'east'))
        s = float(get_data(c, 'south'))
        n = float(get_data(c, 'north'))

        if e < w:
            e += 360

        distance = abs(n - s)
        if distance >= 20:
            constant = 15
        elif 10 < distance < 20:
            constant = 20
        else:
            constant = 30

        lon0 = str((w+e)/2)
        lat0 = str(s - constant)

        w = str(w)
        e = str(e)
        s = str(s)
        n = str(n)
        r[country_code] = {"w": w, "e": e, "n": n, "s": s, "lon0": lon0, "lat0": lat0}
    return r


def get_country_codes():
    selected_feature = 'data-adm0-a3'

    svg_file = 'input/world-detailed2.svg'
    xml_doc = minidom.parse(svg_file)
    paths = xml_doc.getElementsByTagName('path')

    v = []
    for p in paths:
        attr = p.attributes
        for k in attr.keys():
            if k == selected_feature:
                val = attr.get(k).value
                v.append(val)

    return v


def check_folders():
    # TODO: check shp files, if not exists download...
    dirs = ['json', 'output', 'shp']
    # Check folders
    for d in dirs:
        if not os.path.exists(d):
            os.makedirs(d)


def create_svg(json_folder, output_folder):
    for jsonFile in os.listdir(json_folder):
        output_file = "%s.svg" % jsonFile.split('.')[0]
        print "generating %s" % output_file
        call(['kartograph', json_folder + '/' + jsonFile, '-o', output_folder + '/' + output_file])


if __name__ == '__main__':
    # Check the shp file
    check_folders()

    # Get the country codes.
    countries = get_country_codes()
    countryBoxes = get_country_boxes()

    failed = []
    for code in countries:
        code = code.upper()
        try:
            bbox = countryBoxes[code]
            print code, ' : ', bbox
            create_json(code, bbox)
        except KeyError:
            print 'There is no such key for bbox:', code
            failed.append(code)

    create_svg('json', 'output')

    print 'failed countries: ', failed
