from django.conf.urls import *
from tastypie import fields
from tastypie.resources import Resource
from tastypie.bundle import Bundle
from tastypie.exceptions import NotFound
from web.models import Feed
from django.db import connection
import freegeoip
import sys

class Event() :
    def __init__(self, myJSON={'test-key':'test-value'}):
        self.myJSON = myJSON



class EventResource(Resource):
    class Meta:
        object_class = Event
        resource_name='events'

    def get_object_list(self, request):
        results = []

        for x in range(0, 5):
            new_obj = Event(myJSON={'test-key-' + x:'test-value-' + x})
            #new_obj.uuid = result[0]
            results.append(new_obj)

        return results

summary_id=0

class SummaryFeed():
    #{"city":"Sanayi", "freq":57, "longlat":[31, 37]},
    def __init__(self):
        global summary_id
        self.id = summary_id
        summary_id += 1

        self.freq = -1
        self.longlat = [-1, -1]
        self.city = ''
        self.country = ''


results = {}
class SummaryFeedResource(Resource):
    id = fields.CharField(attribute='id')
    freq = fields.IntegerField(attribute = 'freq')
    city = fields.CharField(attribute = 'city', default=None)
    longlat=fields.ListField(attribute='longlat')
    country=fields.CharField(attribute='country')


    class Meta:
        resource_name = 'summary'
        object_class = SummaryFeed

    # adapted this from ModelResource
    # def get_resource_uri(self, bundle_or_obj=None):
    #     kwargs = {
    #         'resource_name': self._meta.resource_name,
    #     }
    #     if isinstance(bundle_or_obj, Bundle):
    #         kwargs['pk'] = bundle_or_obj.obj.id # pk is referenced in ModelResource
    #     else:
    #         kwargs['pk'] = bundle_or_obj.id
    #     if self._meta.api_name is not None:
    #         kwargs['api_name'] = self._meta.api_name
    #     return self._build_reverse_url('api_dispatch_detail', kwargs = kwargs)

    def get_object_list(self, request):
        global results
        results.clear()

        cursor = connection.cursor()
        cursor.execute('SELECT COUNT(*) as freq, longitude, latitude, city, country FROM web_feed GROUP BY longitude, latitude ORDER BY freq DESC')
        rows = cursor.fetchall()
        for r in rows :
            #print 'args: ',r[0], [r[1], r[2]], r[3]
            s = SummaryFeed()
            s.freq=r[0]
            s.longlat=[r[1], r[2]]
            s.city=r[3]
            s.country=r[4]
            s.id='%f_%f'%(r[1], r[2])

            results[s.id] = s

        return results.values()

    def obj_get_list(self, request = None, **kwargs):
        # outer get of object list... this calls get_object_list and
        # could be a point at which additional filtering may be applied
        return self.get_object_list(request)

    def obj_get(self, request = None, **kwargs):
        global results
    # get one object from data source
        pk = int(kwargs['pk'])
        try:
            return results[pk]
        except KeyError:
            raise NotFound("Object not found")

resultsByCountry = {}
class SummaryFeedByCountryCodeResource(Resource):
    id = fields.CharField(attribute='id')
    freq = fields.IntegerField(attribute = 'freq')
    city = fields.CharField(attribute = 'city', default=None)
    longlat=fields.ListField(attribute='longlat')


    class Meta:
        resource_name = 'summary-country'
        object_class = SummaryFeed

    # adapted this from ModelResource
    # def get_resource_uri(self, bundle_or_obj=None):
    #     kwargs = {
    #         'resource_name': self._meta.resource_name,
    #     }
    #     if isinstance(bundle_or_obj, Bundle):
    #         kwargs['pk'] = bundle_or_obj.obj.id # pk is referenced in ModelResource
    #     else:
    #         kwargs['pk'] = bundle_or_obj.id
    #     if self._meta.api_name is not None:
    #         kwargs['api_name'] = self._meta.api_name
    #     return self._build_reverse_url('api_dispatch_detail', kwargs = kwargs)

    def prepend_urls(self):
        return [
            url(r"^(?P<resource_name>%s)/(?P<countrycode>[\w\d_.-]+)/$" % self._meta.resource_name, self.wrap_view('dispatch_detail'), name="api_dispatch_detail"),
        ]

    def get_object_list(self, request):
        return []

    def obj_get_list(self, request = None, **kwargs):
        # outer get of object list... this calls get_object_list and
        # could be a point at which additional filtering may be applied
        return self.get_object_list(request)

    def obj_get(self, request = None, **kwargs):
        global resultsByCountry

        countryCode = kwargs['countrycode'].upper()
        resultsByCountry.clear()

        #countryCode = request.GET.get('countryCode', '')
        #print 'countryCode: ' + countryCode

        cursor = connection.cursor()
        print 'test - 1'
        cursor.execute('SELECT COUNT(*) as freq, longitude, latitude, city FROM web_feed WHERE country = %s GROUP BY longitude, latitude ORDER BY freq DESC', [countryCode] )
        print 'test - 2'
        rows = cursor.fetchall()
        print 'test - 3'
        for r in rows :
            print 'test - 4'
            #print 'args: ',r[0], [r[1], r[2]], r[3]
            s = SummaryFeed()
            s.freq=r[0]
            s.longlat=[r[1], r[2]]
            if r[3] :
                s.city= r[3]
            else:
                s.city= '<Unknown>'
            s.id='%f_%f'%(r[1], r[2])
            resultsByCountry[s.id] = s

        print 'test - 5'
        return resultsByCountry.values()