var MalwarezPopup = function() {
    var infoModalId = "#myInfoModal";
    var countryModalId = "#myModal";
    var countryMapId = "#countryMap"

    /* PRIVATE VARIABLE DEFINITION */
    var countryMap;
    /* END OF PRIVATE DEFINITION */


    /* BASIC INFO MODAL FUNCTIONS */
    function _showInfoModal(msg) {
        if(typeof msg != 'undefined') {
            $(infoModalId +' .modal-body').html(msg);
        }
        $(infoModalId).modal('show');
    }

    function _closeInfoModal() {
        $(infoModalId).modal('hide');
    }
    /* END OF BASIC INFO MODAL FUNCTIONS */

    function _loadCountryMap(countryId, postProcessCallback) {
        var c, scale, updateMap, symbols = [];

        var countryCode = countryId.toLowerCase();
        var mapPath = '/s/maps/country/map-'+countryCode+'.svg';

        c = $(countryMapId);
        c.height(c.width()*0.5);

        try {
            countryMap = $K.map(countryMapId);
            countryMap.loadMap(mapPath, function() {
                countryMap.addLayer('graticule', {
                    styles: {
                        'stroke-opacity': 0.7,
                        'stroke-width': 0.5,
                        'stroke-dasharray': 3.4
                    }
                });
                countryMap.addLayer('graticule_1', {
                    styles: {
                        'stroke-opacity': 0.7,
                        'stroke-width': 0.2
                    }
                });
                countryMap.addLayer(countryCode, {
                    styles: {
                        'stroke': '#fff',
                        'fill': '#cccccf',
                        'fill-opacity': 0.7
                    }
                });

                var dataFile = '/summary-country/'+countryCode+'/';
                $.getJSON(dataFile, function(dataset) {
                    postProcessCallback(countryMap, dataset, 'freq');
                });

                $('#loadingImage').hide();

            });
        }catch(e) {
            console.log('error');
        }
    };


    var _leftPanelId = 'infoCountryLeftPanel';
    function _initCountryLeftPanel(_countryId) {

        $('#'+_leftPanelId).empty();
        $('#'+_leftPanelId).append('<li class="nav-header">Stats</li>');

        function _loadStats(_type, _header) {
            /* TODO: Make it more generic. Send data with header */
            $.getJSON('/top/'+ _type +'/' + _countryId + '/', function(dataset){
                var newId = _leftPanelId+_type;
                $('#'+_leftPanelId).append('<span id="'+ newId +'"></span>');
                $('#'+newId).append('<li class="nav-header">'+_header+'</li>');
                $.each(dataset, function(i, d){
                    $('#' + newId).append('<li>'+d[0] + ' (' + d[1] + ')'+'</li>')
                });
            });
        }

        _loadStats('attackerIP', 'Attacker IP(Hit Count)');
        //_loadStats('targetIP', 'Target IP(Hit Count)');
        _loadStats('attackerPort', 'Attacker Port(Hit Count)');
        _loadStats('targetPort', 'Target Port(Hit Count)');
    }

    function _cleanCountryLeftPanel(){
        $('#'+_leftPanelId).empty();
    }

    function _showCountryMap(countryId, postProcessCallback) {

        _initCountryLeftPanel(countryId);

        $(countryModalId).on('shown', function() {
            _loadCountryMap(countryId, postProcessCallback);
        });

        /* Show Modal */
        $(countryModalId).on('hidden', function() {
            Malwarez.selectedCountryCode = null;
            var paperDom = countryMap.paper.canvas;
            paperDom.parentNode.removeChild(paperDom);
            countryMap.clear();
            countryMap = null;
            _cleanCountryLeftPanel();
            $(countryModalId).unbind('shown');
            $(countryModalId).unbind('hidden');
        });

        $(countryMapId).css({
            top                 : '2%',
            border              :'1px solid black',
            '-webkit-box-sizing': 'border-box',
            '-moz-box-sizing'   : 'border-box',
            'box-sizing'        : 'border-box'
        });

        if(typeof msg != 'undefined') {
            $(countryModalId).html(msg);
        }
        $(countryModalId).modal('show').css({
            width: 'auto', //'90%',
            height: 'auto', //'80%',
            'margin-left': function () {
                // TODO: Make it dynamic
                var ml = -($(countryModalId).width() / 2);
                if(ml > -570){
                    ml = -576;
                }
                return ml;
            }
        });
    }
    function _closeCountryModal() {
        $(countryModalId).modal('hide');
    }

    /*
     * TAKEN FROM: http://craigsworks.com/projects/qtip2/demos/#dialogues
	 * Common dialogue() function that creates our dialogue qTip.
	 * We'll use this method to create both our prompt and confirm dialogues
	 * as they share very similar styles, but with varying content and titles.
	 */
	function dialogue(content, title) {
		/*
		 * Since the dialogue isn't really a tooltip as such, we'll use a dummy
		 * out-of-DOM element as our target instead of an actual element like document.body
		 */
		$('<div />').qtip(
		{
			content: {
				text: content,
				title: title
			},
			position: {
				my: 'center', at: 'center', // Center it...
				target: $(window) // ... in the window
			},
			show: {
				ready: true, // Show it straight away
				modal: {
					on: true, // Make it modal (darken the rest of the page)...
					blur: false // ... but don't close the tooltip when clicked
				}
			},
			hide: false, // We'll hide it maunally so disable hide events
			style: 'qtip-light qtip-rounded qtip-dialogue', // Add a few styles
			events: {
				// Hide the tooltip when any buttons in the dialogue are clicked
				render: function(event, api) {
					$('button', api.elements.content).click(api.hide);
				},
				// Destroy the tooltip once it's hidden as we no longer need it!
				hide: function(event, api) { api.destroy(); }
			}
		});
	}

    // Our Prompt method
	function Prompt(question, countryCodes, callback)
	{
		// Content will consist of a question elem and input, with ok/cancel buttons
		var message = $('<p />', { text: question });
			input = $('<select />', { val: countryCodes });

            $.each(countryCodes, function(i, cc) {
                input.append($('<option>', {text:cc, val:cc}));
            });

			ok = $('<button />', {
				text: 'Ok',
				click: function() { callback( input.val() ); }
			});
			cancel = $('<button />', {
				text: 'Cancel',
				click: function() { callback(null); }
			});

		dialogue( message.add(input).add(ok).add(cancel), 'Attention!' );
	}


    /**
     *
     * Opens a modal according to given parameters.
     *
     * @param header : header to display
     * @param type : type/url of API
     * @param data : data to send as parameters
     *
     */
    function _showAttackerIPDetailModal(type, header, data) {
        $.getJSON('/detail/' + type + '/' + data, function(dataset) {
            /* Sample data : {"latitude": 48.282, "city": "Krasnoarmeysk", "occurrence": [{"url": "http://81.163.95.174:4200/kmuvbn", "freq": 70, "sha512": "7b53f0d725fec17652e032dd19551d97177db9887b06558e944ee813cd2a0c2ea83af916fec309dffa882498ba9496c724778f086d44c75bcfb26bf7ec176d02", "md5": "67b3b71a2678bc5bb13d939d6de9a158"}], "longitude": 37.1758, "country": "UKR"} */
            var htmlData = '<span style="text-align:left;"><h3>' + header + '</h3><pre><code>'
            htmlData += '    IP: ' + data + '\n';

            console.log(dataset);

                htmlData += '    city: ' + dataset['city'] + '\n';
                htmlData += '    country: ' + dataset['country'] + '\n';
                htmlData += '    lat: ' + dataset['latitude'] + ' long: ' + dataset['longitude'] +  '\n';


                htmlData += '    Occurrence: {\n';
            $.each(dataset['occurrence'], function(i, d){
                htmlData += '        url: ' + d['url'] + '\n';
                htmlData += '        freq: ' + d['freq'] + '\n';
                // TODO: Put virustotal API links
                htmlData += '        md5: ' + d['md5'] + '\n';
                htmlData += '        url: ' + d['sha512'] + '\n';
                htmlData += '    }\n';
            });
            htmlData += '</code></pre></span>'

            MalwarezPopup.showInfoModal(htmlData);

        });
    }

    return new Object({
        showInfoModal       : _showInfoModal,
        closeInfoModal      : _closeInfoModal,
        showCountryMap      : _showCountryMap,
        closeCountryModal   : _closeCountryModal,
        prompt              : Prompt,
        showAttackerIPDetail:_showAttackerIPDetailModal
    });
}();
