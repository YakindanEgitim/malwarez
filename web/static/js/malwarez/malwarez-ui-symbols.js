var MalwarezSymbols = function(){

    function _drawBar(map, x, y, d) {
        var tooltipTitle = '';
        var tooltipText = '';

        var x1 = 0;
        var y1 = 0;
        /* TODO: calculate next point */
        _drawShape(map, x, y, x1, y1, tooltipTitle, tooltipText);
    }

    function _drawPoint(map, x, y) {
        var tooltipTitle = '';
        var tooltipText = 'Text x: ' + x + ' y: ' + y;
        _drawShape(map, x, y, x, y, tooltipTitle, tooltipText);
    }

    function _drawShape(map, x, y, x1, y1, tooltipTitle, tooltipText) {
        x = x - 70;
        x1 = x1 - 70;

        var src = new Array(x, y);
        var dst = new Array(x1, y1);
        var shape = map.addGeoPath([src, dst]);
        shape.attr({
            stroke: '#FF0000',
            opacity:.75,
            'stroke-width': 5,
            fill: '#FF0000',
            'stroke-linecap': 'round'
        });

        if (Raphael.svg) {
            setTimeout(function() {
                $(shape.node).qtip({
                    content: {
                        title: tooltipTitle,
                        text: tooltipText
                    },
                    position: {
                        target: 'mouse',
                        viewport: $(window),
                        adjust: { x:7, y:7}
                    }
                }, 0);
            }, 0);

        } else {
            shape.attr('path', map.getGeoPathStr(pts));
        }

        return shape;
    }

    function _showGrid(map) {
        var i, j;
        for(j=-90; j<=90; j+=10) {
            for(i=-180; i<=180; i+=10) {
                _drawPoint(map, i, j);
            }
        }
    }

    /*
     worldMap.addSymbols({
     type: $K.Label,
     data: [{ name: 'Zero', lon: (26.96 - 70), lat: 38.23 }],
     location: function(d) { return [d.lon, d.lat] },
     text: function(d) { return d.name; }
     });
     */

    // get an json of [{'city':'Izmir', 'freq':40, 'latlong':[38.2381801, 26.9604492]}, {'city':'Berlin', 'freq':50, 'latlong':[52.5233, 13.4127]} ]
    function _drawActivities(map, dataset, key) {

        var scale = $K.scale.linear(dataset, key);
        var colscale = chroma.scale(chroma.brewer.PiYG.slice().reverse());

        function __symbolAttrs(data) {
           return {
              r: Math.sqrt(scale(data[key])) * 3,  // radius in pixel
              fill: colscale(scale(data[key]))  // color using chroma.js
           };
        }

        var __symbols = map.addSymbols({
           type: $K.Bubble,
           data: dataset,
           location: function(d) { return [d.longlat[0]-70 , d.longlat[1]] },
           attrs: __symbolAttrs
        });

        var __updateMap = function() {
           scale = $K.scale.linear(dataset, key);
           __symbols.update({
              attrs: __symbolAttrs
           }, 500, 'backOut');
        }

        // This should be called with each socket.io update
        //__updateMap();
    }

    return new Object({
        drawBar: _drawBar,
        drawPoint: _drawPoint,
        drawShape: _drawShape,
        showGrid: _showGrid,
        drawActivities : _drawActivities
    });
}();