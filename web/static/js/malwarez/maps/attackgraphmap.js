var AttackGraphMap = null;

$(function() {

    function checkParam(d, v) {
        if(d) { return d; }
        else  { return v; }
    }

    // constructor
    AttackGraphMap = function(map, data, layer, key) {
        var me = this;
        me.map = map;
        me.layer = checkParam(layer, 'countries');
        me.key = checkParam(key, 'freq');

        /*
        $.each(data.objects, function(i, d) {
           me.addData(d);
        });
        */

        me.drawCurve = function (x, y, ax, ay, bx, by, zx, zy, color) {
            var r = me.map.paper;

            var path = [["M", x, y], ["C", ax, ay, bx, by, zx, zy]],
            //var path = [[1134.8247017317815, 311.85569202863104] , [1165.6464986618207, 395.6015757396965]];
            //var path = [[40-70,40], [100-70, 40]];
            //me.map.addGeoPath(path, ["M", "L"])

            //me.map.paper.path({"fill": "#f00", "stroke": "#000"}).moveTo(50,100).arcTo(50, 50, 1, 1, 150, 100).andClose();
            // TODO: Need to customize style...
            curve = r.path(path).attr({stroke: color || Raphael.getColor(), "stroke-width": 2, "stroke-linecap": "round"});
        };

        me.calculateVerticalSlope = function(src, dst) {
            // normal slope: m = y1 - y0 / x1 - x0
            // slope of perpendicular line = -1/m;
            return -1 / ((dst[1] - src[1]) / (dst[0] - src[0]));
        };

        me.calculateDistance = function(src, dst) {
            return Math.sqrt(((dst[0] - src[0]) * (dst[0] - src[0]))
             + ((dst[1] - src[1]) * (dst[1] - src[1])));
        };

        me.addData = function(_src, _dst, color) {
            var src = me.map.lonlat2xy([_src[0]-70, _src[1]]);
            var dst = me.map.lonlat2xy([_dst[0]-70, _dst[1]]);
            var slope = me.calculateVerticalSlope(src, dst);
            var distance = me.calculateDistance(src, dst);
            var dir_x = 0;
            if(src[0] > dst[0]) {
                dir_x = -1;
            } else if(src[0] < dst[0]){
                dir_x = 1;
            }

            var dir_y = 0;
            if(src[1] > dst[1]) {
                dir_y = -1;
            } else if(src[1] < dst[1]){
                dir_y = 1;
            }

            // Control Points
            var c = 1; //( distance/10 ); // constant value;
            c = Math.abs(slope);
            if(c >= 10) {
                c = 1;
            } else if (5 < c < 10){
                c = 2;
            } else {
                c = 4;
            }

            if(distance < 100) {
                c *= 4;
            } else if( distance >= 100) {
                c *= 2;
            }

            console.log('Hello !!!!!');
            console.log(c);

            //console.log('perpendicular slope: ' + slope + ', normal slope: ' + (-1 / slope) + ', distance: ' + distance + ', dirXY: (' + dir_x + ',' + dir_y + '), src: ' + src + ', dst: ' + dst + ', color: '  + color);
            console.log('pslope: ' + slope + ', dist: ' + distance + ', dirXY: (' + dir_x + ',' + dir_y + '), src: ' + src + ', dst: ' + dst + ', color: '  + color);

            // find the middle point between src and dst
            var mid = [(dst[0] + src[0]) / 2, (dst[1] + src[1]) / 2];
            console.log('c: ' + c + ', mid: ' + mid);
            //c = 40;
            var cp1 = [mid[0] + (dir_x * c), mid[1] + (dir_y * slope * c)];
            var cp2 = cp1;//[dst[0] + (dir_x * c), dst[1] + (dir_y * slope * c)];

            console.log('control points { 1: ' + cp1 + ', 2: ' + cp2);
            me.drawCurve(src[0], src[1], cp1[0], cp1[1], cp2[0], cp2[1], dst[0], dst[1], color);
            // draw control points for debug purpose...
            me.map.paper.circle(cp1[0], cp1[1], 6).attr({stroke: "none", fill: "#000", opacity: .4});
        }
    };



     // Initialize the symbols and
    AttackGraphMap.prototype.init = function() {
        /* initialize new symbols/data or whatever necessary */
        var me = this;

        // Izmir to Hamburg
        me.addData([28,39], [9, 53], 'green');

        // Izmir to Spain
        me.addData([28,39], [0, 41], 'brown');

        me.addData([28,39], [30, 49], 'cadetblue');
        me.addData([28,39], [73, 38], 'coral');
        me.addData([28,39], [47, 61], 'cyan');

        me.addData([28,39], [-45, 64], 'red');
    };

    // Clear all symbols
    AttackGraphMap.prototype.clean = function() { /* Cleanup function. remove all symbols or wahtever created dutin init method */ };

    // Add new event to existing map and update the symbols
    AttackGraphMap.prototype.addEvent = function(newData) {
        /* add new data and render new symbols or trigger update for old ones */

    };

    // Update map
    AttackGraphMap.prototype.update = function() { /* update old ones */}
});
