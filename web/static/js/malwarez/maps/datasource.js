/* Sample Implementation for Data Source class
var DataSource;

$(function() {
    // Constructor
    DataSource = function() {};
    // Update function
    DataSource.prototype.addEvent = function(data) {};
    // Getter functions
    DataSource.prototype.getDataByCountryCode = function(countryCode) {};
    DataSource.prototype.getDataByLocation = function(locationId) {};
    DataSource.prototype.getData = function() {};
});

*/
var FILTERS;

var DataSource;
$(function() {

    FILTERS = new Object({
        MalwareActivity : 'id',
        IPDiversity : 'md5',
        MalwareDiversity : 'saddr'
    });

    /**
     * Constructor
     *
     * filter: defines the diversity option. values: FILTERS
     **/
    DataSource = function(dataset, key, filter) {
        var me = this;
        me.data = [];
        me.sumOfFrequency = 0;
        me.key = key || 'freq';

        me.filter = filter;
        me.diversity = null;
        if(filter && (filter == FILTERS.MalwareDiversity || filter == FILTERS.IPDiversity)) {
            var diversityKey = filter;
            me.diversity = new Diversity(diversityKey);
        }

        me.dataIndexCountry = {};
        me.dataIndexLocation = {};
        me.dataFrequencyCountry = {};

        $.each(dataset.objects, function(i, d) {
           me.addData(d);
        });
    };


    /* @private */
    function initDictionaryIfKeyNotExists(dictionary, key) {
        var result = false;
        if(! dictionary.hasOwnProperty(key)) {
            dictionary[key] = [];
            result = true;
        }
        return result;
    }

    // Update function
    /* Returns true if the given data has a new id  */
    DataSource.prototype.addData = function(data) {
        var me = this;
        var isNewData = false;

        /* data array */
        me.data.push(data);

        /* country based index */
        initDictionaryIfKeyNotExists(me.dataIndexCountry, data.country);
        me.dataIndexCountry[data.country].push(data);

        /* location based index */
        isNewData = initDictionaryIfKeyNotExists(me.dataIndexLocation, data.id);
        me.dataIndexLocation[data.id].push(data);

        /* country based frequency data */
        if(! me.dataFrequencyCountry.hasOwnProperty(data.country)) {
            me.dataFrequencyCountry[data.country] = {"country" : data.country, "freq" : 0};
        }

        me.dataFrequencyCountry[data.country].freq += data.freq;
        me.sumOfFrequency += data.freq;

        // Filtering data
        if(me.diversity) {
            isNewData = me.diversity.addData(newData);
        }
        return isNewData;
    };

    /* private getter function. checks for the key return empty array if key not exists... */
    function get(dict, key) {
        if(key) {
            if(dict.hasOwnProperty(key)) {
                return dict[key];
            }
        }
        return [];
    };

    // Getter functions
    DataSource.prototype.getCountryFrequency = function(countryCode) {
        var me = this;

        var dict = me.dataFrequencyCountry;

        if(me.diversity) {
            dict = me.diversity.getCountryFrequency();
        }

        if(countryCode) {
            return get(dict, countryCode);
        } else {
            return dict;
        }
    };

    DataSource.prototype.getDataByCountryCode = function(countryCode) {
        var me = this;
        return get(me.dataIndexCountry, countryCode);
    };

    DataSource.prototype.getDataByLocation = function(locationId) {
        var me = this;
        return get(me.dataIndexLocation, locationId);
    };

    DataSource.prototype.getData = function() {
        var me = this;
        return me.data;
    };

    DataSource.prototype.getSumOfFrequency = function() {
        var me = this;
        return me.sumOfFrequency;
    };


    /* Diversity Filter class */
    var Diversity = function(diversityKey) {
        var me = this;
        /**
         * Sample data for this structure:
         * {'TUR' : { 'freq':0, 'total':0, 'data':{diversityKey:'', freq:''}}
         * Variables
         * freq     : number of distinct key number
         * total    : total number of entry frequency.
         *
         **/
        me.data = {};
        me.diversityKey = diversityKey;
    };

    /**
     * add new data and returns true if the data not seen previously
     */
    Diversity.prototype.addData = function(newData) {
        var me = this;

        var isNewData = false;
        if( !me.data.hasOwnProperty(newData.country)) {
            isNewData = true;

            var key = me.diversityKey;
            me.data[newData.country] = { 'country': newData.country, 'freq': 0, 'total':0, data : {} };
        }

        var key = me.diversityKey;
        if(me.data[newData.country].data.hasOwnProperty(newData[key])) {
            isNewData = true;

            me.data[newData.country].data[newData[key]] = 0;
            me.data[newData.country].freq += 1;
        }
        me.data[newData.country].data[newData[key]] += newData.freq;
        me.data[newData.country].total += newData.freq;

        return isNewData;
    }

    Diversity.prototype.getCountryFrequency = function() {
        var me = this;
        return me.data;
    }

});