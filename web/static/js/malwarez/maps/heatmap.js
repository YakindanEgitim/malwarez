var HeatMap;

$(function() {

    /**
     * Constructor
     */
    HeatMap = function(map, datasource, layer, key) {
        var me = this;

        me.map = map;
        me.dataSource = datasource;
        me.color = null;
        me.key = key ? key : 'freq';
        me.layer = layer ? layer : 'countries';

        me.color = null;
        me.oldStyles = null;
    };

    /**
     * Initialize the symbols and
     */
    HeatMap.prototype.init = function() {
        var me = this;
        me.oldStyles={};
        me.oldStyles['fill'] = $(me.map.getLayer(me.layer).paths[0].svgPath)[0].attr('fill');
        me.oldStyles['stroke'] = $(me.map.getLayer(me.layer).paths[0].svgPath)[0].attr('stroke');
        me.oldStyles['stroke-width'] = $(me.map.getLayer(me.layer).paths[0].svgPath)[0].attr('stroke-width');
        me.update();

        /* Span element added for easy tooltip update... */
        me.map.getLayer('countries').tooltips(
            function(d) {
                var divId = 'TT_'+ d.id;
                var data = me.dataSource.getCountryFrequency()[d.id];
                if(data){
                    return [d.name, '# of activities: <span id="'+ divId +'">' + data[me.key] + '</span>'];
                } else {
                    return [d.name, '# of activities: <span id="'+ divId +'">0</span>'];
                }

            }
        );
    };

    /**
     * Clear all symbols
     */
    HeatMap.prototype.clean = function() {
        // Nothing to do.
        var me = this;
        me.map.getLayer(me.layer).style(me.oldStyles);
    };

    /**
     * Add new event to existing map and update the symbols
     */
    HeatMap.prototype.addEvent = function(newData) {
        var me = this;
        MalwarezSymbols.drawPoint(me.map, newData.longlat[0], newData.longlat[1], '#00FF00');
        me.dataSource.addData(newData);
        var id = newData.country;
        var val = me.dataSource.getCountryFrequency(id)[me.key];
        // Update country tooltip...
        $("span#TT_" + id).html(val);
        me.update(true)
    };

    /**
     * Update map
     */
    HeatMap.prototype.update = function(passScale) {
        var me = this;
        var map = me.map;
        var key = me.key;
        var data = me.dataSource.getCountryFrequency();
        var layer = me.layer;

        /* TODO: No need to update each time... Recalculate scale if only the upper bound increased by 25. */
        if(!passScale) {
            me.color = chroma.scale('Reds').domain(data, 25, 'quantiles', key);
        }
        var color = me.color;

        map.getLayer(layer).style('stroke-width', 0.7);
        map.getLayer(layer).style('fill',
            function(d) {
                var v = 0;
                if(data[d.id]) {
                    v = data[d.id][key];
                }
                return color(v);
            });

        map.getLayer(layer).style('stroke',
            function(d) {
                var v = 0;
                if(data[d.id]) {
                    v = data[d.id][key];
                }
                return color(v).darken(0.5);
            });
    }
});
