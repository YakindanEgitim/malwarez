var HeatMap;

$(function() {

    // Move this to an util class/function
    function checkParam(d, v) {
        if(d) { return d; }
        else  { return v; }
    }

    /**
     * Constructor
     */
    HeatMap = function(map, data, layer, key) {
        this.map = map;
        this.data = {};
        this.color = null;
        this.key = checkParam(key, 'freq');
        this.layer = checkParam(layer, 'countries');

        this.color = null;
        this.oldStyles = null;

        var me = this;
        key = this.key;
        $.each(data.objects, function(i, d) {
            /* Simple indexing for socket.io updates */
            if(!me.data[d.country]) {
                me.data[d.country] = { 'country': d.country };
                me.data[d.country][key] = 0;
            }
            me.data[d.country][key] += d[key];
        });
    }

    /**
     * Initialize the symbols and
     */
    HeatMap.prototype.init = function() {
        var me = this;
        me.oldStyles={};
        me.oldStyles['fill'] = $(me.map.getLayer(me.layer).paths[0].svgPath)[0].attr('fill');
        me.oldStyles['stroke'] = $(me.map.getLayer(me.layer).paths[0].svgPath)[0].attr('stroke');
        me.oldStyles['stroke-width'] = $(me.map.getLayer(me.layer).paths[0].svgPath)[0].attr('stroke-width');
        me.update();
    }

    /**
     * Clear all symbols
     */
    HeatMap.prototype.clean = function() {
        // Nothing to do.
        var me = this;
        me.map.getLayer(me.layer).style(me.oldStyles);
    }

    /**
     * Add new event to existing map and update the symbols
     */
    HeatMap.prototype.addEvent = function(newData) {
        //this.map.getLayer(this.layer).css('fill');
    }

    /**
     * Update map
     */
    HeatMap.prototype.update = function() {
        var me = this;
        var map = me.map;
        var key = me.key;
        var data = me.data;
        var layer = me.layer;

        me.color = chroma.scale('Reds').domain(data, 25, 'quantiles', key);
        var color = me.color;

        map.getLayer(layer).style('stroke-width', 0.7);
        map.getLayer(layer).style('fill',
            function(d) {
                var v = 0;
                if(data[d.id]) {
                    v = data[d.id][key];
                }
                return color(v);
            });

        map.getLayer(layer).style('stroke',
            function(d) {
                var v = 0;
                if(data[d.id]) {
                    v = data[d.id][key];
                }
                return color(v).darken(0.5);
            });

        map.getLayer('countries').tooltips(
            function(d) {
                if(data[d.id]){
                    return [d.name, '# of activities: ' + data[d.id][key]];
                } else {
                    return [d.name, '# of activities: 0'];
                }

            }
        );
    }
});
