# Create your views here.
from django.shortcuts import render_to_response
from django.utils.translation import ugettext as _
from django.db import connection
from django.http import HttpResponse
import json


def index(request):
    return render_to_response('index.html',{'hello_text':'Hello World'})


def test(request):
    return render_to_response('test.html')


class SummaryFeed():
    def __init__(self, id, freq, city, longlat):
        self.id = id
        self.freq = freq
        if city :
            self.city= city
        else:
            self.city= _("<Unknown>")
        self.longlat= longlat

    def to_json_dict(self):
        #return json.dumps({k: str(v) for k, v in self.__dict__.items()})
        return {"id" : self.id, "freq" : self.freq, "city" : self.city, "longlat": self.longlat }


def getSummaryByCountry(request, countryCode):
    result = []

    #print 'Hello World! This is easy!!!'
    #countryCode = request.GET.get('countryCode', '')
    #print 'countryCode: ' + countryCode
    countryCode = countryCode.upper()
    cursor = connection.cursor()
    cursor.execute('SELECT COUNT(*) as freq, longitude, latitude, city FROM web_feed WHERE country = %s GROUP BY longitude, latitude ORDER BY freq DESC', [countryCode] )
    rows = cursor.fetchall()
    for r in rows :
        id='%f_%f'%(r[1], r[2])
        s = SummaryFeed(id, r[0], r[3], [r[1], r[2]])
        result.append(s)

    return HttpResponse(json.dumps([s.to_json_dict() for s in result]), mimetype='application/json')


def __executeAndReturn(query):
    results=[]
    cursor = connection.cursor()
    cursor.execute(query)
    rows = cursor.fetchall()
    for r in rows:
        freq = r[0]
        data = r[1]
        results.append((data, freq))

    return results


def __getTopAttackerCountry(limit=5, country=None):
    """
    @private
    Returns top 5 targeted country as array
    """

    query = 'SELECT COUNT(*) as f, country FROM ' \
            '(SELECT COUNT(*) as freq, country FROM web_feed WHERE country NOT LIKE "" GROUP BY saddr) tempTable ' \
            'GROUP BY country ' \
            'ORDER BY f DESC ' \
            'LIMIT %d' % (int(limit))

    return __executeAndReturn(query)


def __getTopAttackerIP(limit=5, country=None):
    """
    @private
    Returns top 5 attacker IP address as array
    """
    whereClause = ''
    if country :
        whereClause = ' WHERE country LIKE \'%s\' ' % country

    query = 'SELECT COUNT(*) as f, saddr ' \
            'FROM web_feed ' + whereClause + \
            'GROUP BY saddr ' \
            'ORDER BY f ' \
            'DESC LIMIT %d' % int(limit)

    return __executeAndReturn(query)


def __getTopAttackerPort(limit=5, country=None):
    """
    @private
    Returns top 5 attacker port numbers as array
    """
    whereClause = ''
    if country :
        whereClause = ' WHERE country LIKE \'%s\' ' % country

    query = 'SELECT COUNT(*) as f, sport ' \
            'FROM web_feed ' + whereClause + \
            'GROUP BY sport ' \
            'ORDER BY f ' \
            'DESC LIMIT %d' % int(limit)

    return __executeAndReturn(query)


def __getTopTargetIP(limit=5, country=None):
    """
    @private
    Returns top 5 targeted IP address as array
    """
    whereClause = ''
    if country :
        whereClause = ' WHERE country LIKE \'%s\' ' % country
    query = 'SELECT COUNT(*) as f, daddr ' \
            'FROM web_feed ' + whereClause + \
            'GROUP BY daddr ' \
            'ORDER BY f ' \
            'DESC LIMIT %d' % int(limit)

    return __executeAndReturn(query)


def __getTopTargetPort(limit=5, country=None):
    """
    @private
    Returns top 5 targeted port numbers as array
    """
    whereClause = ''
    if country :
        whereClause = ' WHERE country LIKE \'%s\' ' % country
    query = 'SELECT COUNT(*) as f, dport ' \
            'FROM web_feed ' + whereClause + \
            'GROUP BY dport ' \
            'ORDER BY f ' \
            'DESC LIMIT %d' % int(limit)

    return __executeAndReturn(query)

methods={
    "attackerCountry"   : __getTopAttackerCountry,
    "attackerIP"        : __getTopAttackerIP,
    "attackerPort"      : __getTopAttackerPort,
    "targetIP"          : __getTopTargetIP,
    "targetPort"        : __getTopTargetPort
}


# TODO: Make it more generic. Send data with header and !!! i18n !!!
def getTopFive(request, type, country=None):
    if country:
        country = country.upper()

    result = {}
    if type in methods.keys():
        f = methods[type]
        results = f(limit=5, country=country)
    else:
        results = ['ERR']

    return HttpResponse(json.dumps(results), mimetype='application/json')


def __getDetailAttackerCountry(data) :
    print '__getDetailAttackerCountry(data=', data, ')'


def __getDetailAttackerIP(srcIP):
    print '__getDetailAttackerIP(srcIP=', srcIP, ')'
    query = 'SELECT COUNT(*) as freq, md5, sha512, url ' \
        'FROM web_feed ' \
        'WHERE saddr LIKE %s ' + \
        'GROUP BY url, md5, sha512 ' \
        'ORDER BY freq DESC'

    print query, '-', srcIP
    cursor = connection.cursor()
    cursor.execute(query, [srcIP, ])
    rows = cursor.fetchall()

    occurrence_result = []
    total_freq = 0
    for r in rows:
        total_freq += r[0]
        occurrence_result.append({
            'freq': r[0],
            'md5': r[1],
            'sha512': r[2],
            'url': r[3]
        })

    query = 'SELECT city, country, latitude, longitude ' \
            'FROM web_feed ' \
            'WHERE saddr LIKE %s'

    cursor.close()
    cursor = connection.cursor()
    cursor.execute(query, [srcIP, ])
    rows = cursor.fetchall()
    r = rows[0]
    city = r[0]
    country = r[1]
    latitude = r[2]
    longitude = r[3]

    results = {'occurrence': occurrence_result,
               'city': city,
               'country': country,
               'latitude': latitude,
               'longitude': longitude
                }

    return results


detailMethods = {
    'attackerCountry'   : __getDetailAttackerCountry,
    'attackerIP'        : __getDetailAttackerIP
}


def getDetail(request, type, data=None, country=None):
    result = {}
    if type in detailMethods.keys():
        f = detailMethods[type]
        results = f(data)
    else:
        results = ['ERR']

    return HttpResponse(json.dumps(results), mimetype='application/json')