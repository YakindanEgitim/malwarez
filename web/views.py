# Create your views here.
from django.shortcuts import render_to_response
from django.db import connection
from django.http import HttpResponse
import json


def index(request):
    return render_to_response('index.html', {'hello_text': 'Hello World'})


def test(request):
    return render_to_response('test.html')


class SummaryFeed():
    def __init__(self, _id, freq, city, longlat):
        self.id = _id
        self.freq = freq
        if city:
            self.city = city
        else:
            self.city = "<Unknown>"
        self.longlat = longlat

    def to_json_dict(self):
        # return json.dumps({k: str(v) for k, v in self.__dict__.items()})
        return {"id": self.id, "freq": self.freq, "city": self.city, "longlat": self.longlat}


def get_summary_by_country(request, country_code):
    result = []

    country_code = country_code.upper()
    cursor = connection.cursor()
    cursor.execute('SELECT COUNT(*) as freq, longitude, latitude, city FROM web_feed WHERE country = %s '
                   'GROUP BY longitude, latitude ORDER BY freq DESC', [country_code])
    rows = cursor.fetchall()
    for r in rows:
        _id = '%f_%f' % (r[1], r[2])
        s = SummaryFeed(_id, r[0], r[3], [r[1], r[2]])
        result.append(s)

    return HttpResponse(json.dumps([s.to_json_dict() for s in result]), mimetype='application/json')


class DiversitySummary():
    def __init__(self, country, key, freq):
        self.country = country
        self.key = key
        self.freq = freq

    def to_json_dict(self, key):
        return {"country": self.country, "freq": self.freq, key: self.key}


def get_diversity_malware(request):
    result = []
    cursor = connection.cursor()
    cursor.execute('SELECT country, md5, count(*) as freq from web_feed WHERE country <> "" '
                   'GROUP BY country, md5 ORDER BY country')
    rows = cursor.fetchall()
    for r in rows:
        s = DiversitySummary(r[0], r[1], r[2])
        result.append(s)

    return HttpResponse(json.dumps({"objects": [s.to_json_dict('md5') for s in result]}), mimetype='application/json')


def get_diversity_ip(request):
    result = []
    cursor = connection.cursor()
    cursor.execute('SELECT country, saddr, count(*) as freq from web_feed WHERE country <> "" '
                   'GROUP BY country, saddr ORDER BY country')
    rows = cursor.fetchall()
    for r in rows:
        s = DiversitySummary(r[0], r[1], r[2])
        result.append(s)

    return HttpResponse(json.dumps({"objects": [s.to_json_dict('saddr') for s in result]}), mimetype='application/json')


def __execute_and_return(query):
    results = []
    cursor = connection.cursor()
    cursor.execute(query)
    rows = cursor.fetchall()
    for r in rows:
        freq = r[0]
        data = r[1]
        results.append((data, freq))

    return results


def __get_top_attacker_country(limit=5, country=None):
    """
    @private
    Returns top 5 targeted country as array
    """
    # TODO: Revise parameter country
    query = 'SELECT COUNT(*) as f, country FROM ' \
            '(SELECT COUNT(*) as freq, country FROM web_feed WHERE country NOT LIKE "" GROUP BY saddr) tempTable ' \
            'GROUP BY country ' \
            'ORDER BY f DESC ' \
            'LIMIT %d' % (int(limit))

    return __execute_and_return(query)


def __get_top_attacker_ip(limit=5, country=None):
    """
    @private
    Returns top 5 attacker IP address as array
    """
    where_clause = ''
    if country:
        where_clause = ' WHERE country LIKE \'%s\' ' % country

    query = 'SELECT COUNT(*) as f, saddr ' \
            'FROM web_feed ' + where_clause + \
            'GROUP BY saddr ' \
            'ORDER BY f ' \
            'DESC LIMIT %d' % int(limit)

    return __execute_and_return(query)


def __get_top_attacker_port(limit=5, country=None):
    """
    @private
    Returns top 5 attacker port numbers as array
    """
    where_clause = ''
    if country:
        where_clause = ' WHERE country LIKE \'%s\' ' % country

    query = 'SELECT COUNT(*) as f, sport ' \
            'FROM web_feed ' + where_clause + \
            'GROUP BY sport ' \
            'ORDER BY f ' \
            'DESC LIMIT %d' % int(limit)

    return __execute_and_return(query)


def __get_top_target_ip(limit=5, country=None):
    """
    @private
    Returns top 5 targeted IP address as array
    """
    # whereClause = ''
    # if country:
    #    whereClause = ' WHERE country LIKE \'%s\' ' % country
    # query = 'SELECT COUNT(*) as f, daddr FROM web_feed '
    # + whereClause + ' GROUP BY daddr ORDER BY f DESC LIMIT %d' % int(limit)

    return []  # __execute_and_return(query)


def __get_top_target_port(limit=5, country=None):
    """
    @private
    Returns top 5 targeted port numbers as array
    """
    where_clause = ''
    if country:
        where_clause = ' WHERE country LIKE \'%s\' ' % country
    query = 'SELECT COUNT(*) as f, dport ' \
            'FROM web_feed ' + where_clause + \
            'GROUP BY dport ' \
            'ORDER BY f ' \
            'DESC LIMIT %d' % int(limit)

    return __execute_and_return(query)

methods = {
    "attackerCountry": __get_top_attacker_country,
    "attackerIP": __get_top_attacker_ip,
    "attackerPort": __get_top_attacker_port,
    "targetIP": __get_top_target_ip,
    "targetPort": __get_top_target_port
}


# TODO: Make it more generic. Send data with header and !!! i18n !!!
def get_top_five(request, _type, country=None):
    if country:
        country = country.upper()

    result = None  # {}
    if _type in methods.keys():
        f = methods[_type]
        results = f(limit=5, country=country)
    else:
        results = ['ERR']

    return HttpResponse(json.dumps(results), mimetype='application/json')


def __get_detail_attacker_country(data):
    print '__get_detail_attacker_country(data=', data, ')'


def __get_detail_attacker_ip(src_ip):
    print '__get_detail_attacker_ip(srcIP=', src_ip, ')'
    query = 'SELECT COUNT(*) as freq, md5, sha512, url ' \
        'FROM web_feed ' \
        'WHERE saddr LIKE %s ' + \
        'GROUP BY url, md5, sha512 ' \
        'ORDER BY freq DESC'

    print query, '-', src_ip
    cursor = connection.cursor()
    cursor.execute(query, [src_ip, ])
    rows = cursor.fetchall()

    occurrence_result = []
    total_freq = 0
    for r in rows:
        total_freq += r[0]
        occurrence_result.append({
            'freq': r[0],
            'md5': r[1],
            'sha512': r[2],
            'url': r[3]
        })

    query = 'SELECT city, country, latitude, longitude ' \
            'FROM web_feed ' \
            'WHERE saddr LIKE %s'

    cursor.close()
    cursor = connection.cursor()
    cursor.execute(query, [src_ip, ])
    rows = cursor.fetchall()
    r = rows[0]
    city = r[0]
    country = r[1]
    latitude = r[2]
    longitude = r[3]

    results = {'occurrence': occurrence_result,
               'city': city,
               'country': country,
               'latitude': latitude,
               'longitude': longitude
               }

    return results


detailMethods = {
    'attackerCountry': __get_detail_attacker_country,
    'attackerIP': __get_detail_attacker_ip
}


def get_detail(request, _type, data=None, country=None):
    # TODO: Revise parameter country
    if _type in detailMethods.keys():
        f = detailMethods[_type]
        results = f(data)
    else:
        results = ['ERR']

    return HttpResponse(json.dumps(results), mimetype='application/json')